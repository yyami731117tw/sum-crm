// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone         String?
  lineId        String?
  address       String?
  birthday      DateTime?
  role          String    @default("guest")
  status        String    @default("pending")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Member {
  id                  String         @id @default(cuid())
  memberNo            String         @unique
  name               String
  nickname           String?
  gender             String
  phone              String
  email              String?
  birthday           DateTime
  age                Int?
  address            String?
  idNumber           String         @unique
  status             String         @default("active")
  memberType         String
  membershipStartDate DateTime?
  membershipEndDate   DateTime?
  remainingDays      Int?
  occupation         String?
  lineId             String?
  notes              String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  relatedMembers     RelatedMember[]
  investments        Investment[]
  logs               MemberLog[]
}

model RelatedMember {
  id               String   @id @default(cuid())
  memberId         String
  relatedMemberId  String
  relationship     String
  createdAt        DateTime @default(now())
  member           Member   @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model Investment {
  id          String   @id @default(cuid())
  memberId    String
  amount      Float
  type        String
  status      String
  date        DateTime
  notes       String?
  createdAt   DateTime @default(now())
  member      Member   @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model MemberLog {
  id          String   @id @default(cuid())
  memberId    String
  action      String
  details     String
  operator    String
  changes     Json?
  createdAt   DateTime @default(now())
  member      Member   @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
