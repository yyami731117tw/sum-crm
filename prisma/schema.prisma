generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  phone             String?            @unique
  lineId            String?
  address           String?
  birthday          DateTime?
  nickname          String?
  role              String             @default("guest")
  status            String             @default("pending")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLoginAt       DateTime?
  registeredAt      DateTime?
  accounts          Account[]
  sessions          Session[]
  logs              UserLog[]
  verificationCodes VerificationCode[]

  @@map("users")
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("verification_codes")
}

model Member {
  id                  String          @id @default(cuid())
  memberNo            String          @unique
  name                String
  phone               String
  gender              String
  nickname            String?
  idNumber            String          @unique
  birthday            DateTime
  status              String          @default("active")
  email               String?
  lineId              String?
  address             String?
  occupation          String?
  notes               String?
  membershipStartDate DateTime?
  membershipEndDate   DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  age                 Int?
  memberType          String
  remainingDays       Int?
  investments         Investment[]
  logs                MemberLog[]
  relatedMembers      RelatedMember[]
  contracts           Contract[]
}

model RelatedMember {
  id              String   @id @default(cuid())
  memberId        String
  relationship    String
  createdAt       DateTime @default(now())
  relatedMemberId String
  member          Member   @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model Investment {
  id        String   @id @default(cuid())
  memberId  String
  amount    Float
  date      DateTime
  status    String
  createdAt DateTime @default(now())
  notes     String?
  type      String
  member    Member   @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model MemberLog {
  id        String   @id @default(cuid())
  memberId  String
  action    String
  details   String
  operator  String
  changes   Json?
  createdAt DateTime @default(now())
  member    Member   @relation(fields: [memberId], references: [id])

  @@index([memberId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String
  operator  String
  timestamp DateTime @default(now())
  changes   Json?
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Contract {
  id            String        @id @default(cuid())
  contractNo    String        @unique
  projectName   String
  memberId      String
  memberName    String
  memberNo      String
  amount        Float
  paymentMethod String?
  bankAccount   String?
  signDate      DateTime
  startDate     DateTime
  endDate       DateTime
  status        String        @default("進行中")
  invoiceInfo   String?
  notes         String?
  contractFile  String?
  attachments   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  logs          ContractLog[]
  member        Member        @relation(fields: [memberId], references: [id])

  @@index([memberId])
  @@map("contracts")
}

model ContractLog {
  id         String   @id @default(cuid())
  contractId String
  action     String
  details    String
  operator   String
  timestamp  DateTime @default(now())
  changes    Json?
  contract   Contract @relation(fields: [contractId], references: [id])

  @@index([contractId])
  @@map("contract_logs")
}
